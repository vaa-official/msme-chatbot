Flask==2.3.2
Flask-Session
flask-cors
gunicorn==21.2.0
requests
scikit-learn
zappa
nltk










<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MSME OSEM - AI Business Assistant</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="icon" href="https://msmeosem.in/wp-content/uploads/2023/12/cropped-osem-favicon-32x32.png" sizes="32x32">
  <style>
    :root {
      --primary-color: #0056b3;
      --primary-dark: #004494;
      --secondary-color: #003366;
      --accent-color: #007bff;
      --success-color: #28a745;
      --light-bg: #f8f9fa;
      --dark-text: #212529;
      --light-text: #f8f9fa;
      --border-color: #dee2e6;
      --shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      --chat-bubble-user: #0056b3;
      --chat-bubble-bot: #edf2f4;
      --header-gradient: linear-gradient(135deg, #0056b3 0%, #003366 100%);
      --msme-orange: #fd7e14;
      --msme-light-blue: #e9f0f8;
      --expert-card-bg: #ffffff;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--light-bg);
      color: var(--dark-text);
      line-height: 1.6;
      overflow-x: hidden;
    }

    /* Header Styles */
    .app-header {
      background: var(--header-gradient);
      color: white;
      padding: 1rem 2rem;
      box-shadow: var(--shadow);
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      z-index: 1000;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: all 0.3s ease;
    }

    .app-header.hidden {
      transform: translateY(-100%);
    }

    .logo-container {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .logo-img {
      height: 40px;
      width: auto;
    }

    .logo-text {
      display: flex;
      flex-direction: column;
    }

    .logo-title {
      font-size: 1.5rem;
      font-weight: 700;
      line-height: 1.2;
    }

    .logo-subtitle {
      font-size: 0.8rem;
      opacity: 0.9;
    }

    .header-actions {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .header-btn {
      background: rgba(255, 255, 255, 0.2);
      border: none;
      border-radius: 50px;
      color: white;
      padding: 0.5rem 1.25rem;
      font-size: 0.9rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .header-btn:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .header-btn i {
      font-size: 1rem;
    }

    /* Main Content */
    .main-container {
      padding-top: 6rem;
      padding-bottom: 5rem;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .hero-section {
      text-align: center;
      max-width: 800px;
      margin: 0 auto 3rem;
      padding: 0 1.5rem;
    }

    .hero-title {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 1rem;
      color: var(--primary-color);
      line-height: 1.2;
    }

    .hero-subtitle {
      font-size: 1.1rem;
      color: var(--dark-text);
      opacity: 0.8;
      margin-bottom: 2rem;
    }

    .features-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      width: 100%;
      max-width: 1200px;
      padding: 0 1.5rem;
      margin-bottom: 3rem;
    }

    .feature-card {
      background: white;
      border-radius: 12px;
      padding: 2rem;
      box-shadow: var(--shadow);
      transition: transform 0.3s ease;
      border: 1px solid var(--border-color);
    }

    .feature-card:hover {
      transform: translateY(-5px);
    }

    .feature-icon {
      font-size: 2.5rem;
      color: var(--primary-color);
      margin-bottom: 1.5rem;
    }

    .feature-title {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 1rem;
      color: var(--primary-dark);
    }

    .feature-desc {
      font-size: 0.95rem;
      color: var(--dark-text);
      opacity: 0.8;
    }

    .cta-section {
      text-align: center;
      margin-top: 2rem;
    }

    .cta-btn {
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 50px;
      padding: 0.8rem 2rem;
      font-size: 1.1rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(0, 86, 179, 0.3);
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
    }

    .cta-btn:hover {
      background: var(--primary-dark);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 86, 179, 0.4);
    }

    .cta-btn i {
      font-size: 1.2rem;
    }

    /* Chatbot Styles */
    .chatbot-container {
      position: fixed;
      bottom: 2rem;
      right: 2rem;
      z-index: 1001;
      transition: all 0.3s ease;
    }

    .chatbot-btn {
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 50px;
      padding: 1rem 1.5rem;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      box-shadow: 0 4px 20px rgba(0, 86, 179, 0.3);
      display: flex;
      align-items: center;
      gap: 0.75rem;
      transition: all 0.3s ease;
    }

    .chatbot-btn:hover {
      background: var(--primary-dark);
      transform: translateY(-3px);
      box-shadow: 0 6px 25px rgba(0, 86, 179, 0.4);
    }

    .chatbot-btn i {
      font-size: 1.2rem;
    }

    .chatbot-btn.hidden {
      opacity: 0;
      pointer-events: none;
      transform: translateY(20px);
    }

    .chatbot-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1002;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }

    .chatbot-modal.active {
      opacity: 1;
      pointer-events: all;
    }

    .chatbot-window {
      background: white;
      border-radius: 16px;
      width: 90%;
      max-width: 800px;
      height: 80vh;
      max-height: 700px;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      transform: translateY(20px);
      transition: transform 0.3s ease;
      box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    }

    .chatbot-modal.active .chatbot-window {
      transform: translateY(0);
    }

    .chatbot-header {
      background: var(--header-gradient);
      color: white;
      padding: 1rem 1.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .chatbot-title {
      font-size: 1.25rem;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .chatbot-title i {
      font-size: 1.2rem;
    }

    .chatbot-close {
      background: none;
      border: none;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 50%;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background 0.2s ease;
    }

    .chatbot-close:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    .chatbot-messages {
      flex: 1;
      padding: 1.5rem;
      overflow-y: auto;
      background-color: var(--msme-light-blue);
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .message {
      display: flex;
      max-width: 80%;
    }

    .message-bot {
      align-self: flex-start;
    }

    .message-user {
      align-self: flex-end;
    }

    .message-content {
      padding: 0.75rem 1.25rem;
      border-radius: 18px;
      line-height: 1.5;
      position: relative;
      word-wrap: break-word;
    }

    .message-bot .message-content {
      background: var(--chat-bubble-bot);
      color: var(--dark-text);
      border-bottom-left-radius: 4px;
    }

    .message-user .message-content {
      background: var(--chat-bubble-user);
      color: white;
      border-bottom-right-radius: 4px;
    }

    .message-avatar {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 0.75rem;
      flex-shrink: 0;
      font-weight: 600;
      color: white;
    }

    .message-bot .message-avatar {
      background: var(--secondary-color);
    }

    .message-user .message-avatar {
      background: var(--primary-dark);
      margin-right: 0;
      margin-left: 0.75rem;
    }

    .typing-indicator {
      display: flex;
      padding: 0.75rem 1.25rem;
      background: var(--chat-bubble-bot);
      border-radius: 18px;
      width: fit-content;
      margin-bottom: 0.5rem;
      align-self: flex-start;
    }

    .typing-indicator span {
      height: 8px;
      width: 8px;
      background-color: var(--dark-text);
      border-radius: 50%;
      display: inline-block;
      margin: 0 2px;
      opacity: 0.4;
    }

    .typing-indicator span:nth-child(1) {
      animation: bounce 1s infinite;
    }

    .typing-indicator span:nth-child(2) {
      animation: bounce 1s infinite 0.2s;
    }

    .typing-indicator span:nth-child(3) {
      animation: bounce 1s infinite 0.4s;
    }

    @keyframes bounce {
      0%, 100% { opacity: 0.4; transform: translateY(0); }
      50% { opacity: 1; transform: translateY(-5px); }
    }

    .chatbot-input {
      display: flex;
      padding: 1rem;
      background: white;
      border-top: 1px solid var(--border-color);
    }

    .chatbot-input-field {
      flex: 1;
      padding: 0.75rem 1.25rem;
      border: 1px solid var(--border-color);
      border-radius: 50px;
      font-size: 1rem;
      outline: none;
      transition: border 0.3s ease;
    }

    .chatbot-input-field:focus {
      border-color: var(--primary-color);
    }

    .chatbot-send-btn {
      background: var(--primary-color);
      color: white;
      border: none;
      border-radius: 50%;
      width: 48px;
      height: 48px;
      margin-left: 0.75rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .chatbot-send-btn:hover {
      background: var(--primary-dark);
    }

    .chatbot-send-btn i {
      font-size: 1.2rem;
    }

    .chatbot-stop-btn {
      background: #dc3545;
      color: white;
      border: none;
      border-radius: 50%;
      width: 48px;
      height: 48px;
      margin-left: 0.75rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: none;
      align-items: center;
      justify-content: center;
    }

    .chatbot-stop-btn:hover {
      background: #c82333;
    }

    .chatbot-stop-btn i {
      font-size: 1.2rem;
    }

    .chatbot-actions {
      padding: 1rem;
      background: #f9fafb;
      border-top: 1px solid var(--border-color);
      display: flex;
      justify-content: center;
    }

    .chatbot-clear-btn {
      background: #6c757d;
      color: white;
      border: none;
      border-radius: 50px;
      padding: 0.5rem 1.25rem;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .chatbot-clear-btn:hover {
      background: #5a6268;
    }

    /* Expert Search Options */
    .expert-options {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      margin-top: 1rem;
    }

    .option-btn {
      background: rgba(0, 86, 179, 0.1);
      color: var(--primary-color);
      border: 1px solid rgba(0, 86, 179, 0.2);
      border-radius: 12px;
      padding: 0.75rem 1.25rem;
      font-size: 0.95rem;
      cursor: pointer;
      transition: all 0.3s ease;
      text-align: center;
      font-weight: 500;
    }

    .option-btn:hover {
      background: rgba(0, 86, 179, 0.2);
      transform: translateY(-2px);
    }

    .option-btn i {
      margin-right: 0.5rem;
    }

    /* District/Designation Options */
    .selection-options {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 10px;
    }

    .selection-option {
      padding: 8px 12px;
      background-color: #e9ecef;
      border: 1px solid #ced4da;
      border-radius: 20px;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 0.9rem;
    }

    .selection-option:hover {
      background-color: #d1e7ff;
      border-color: #86b7fe;
    }

    /* Expert Cards */
    .experts-list {
      margin-top: 15px;
      display: grid;
      gap: 15px;
    }

    .expert-card {
      padding: 15px;
      border-radius: 8px;
      background-color: var(--expert-card-bg);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      border-left: 4px solid var(--primary-color);
    }

    .expert-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .expert-card strong {
      display: block;
      margin-bottom: 8px;
      font-size: 1.1em;
      color: var(--primary-dark);
    }

    .expert-card div {
      margin-bottom: 4px;
      font-size: 0.9rem;
    }

    .expert-card .expert-label {
      font-weight: 600;
      color: #495057;
    }

    .expert-card .expert-value {
      color: #212529;
    }

    .expert-designation {
      background: rgba(0, 86, 179, 0.1);
      color: var(--primary-color);
      padding: 2px 8px;
      border-radius: 4px;
      font-size: 0.8rem;
      display: inline-block;
      margin-top: 5px;
    }

    .expert-district {
      background: rgba(253, 126, 20, 0.1);
      color: var(--msme-orange);
      padding: 2px 8px;
      border-radius: 4px;
      font-size: 0.8rem;
      display: inline-block;
      margin-top: 5px;
    }

    /* Loading animation */
    .loader {
      border: 3px solid #f3f3f3;
      border-top: 3px solid var(--primary-color);
      border-radius: 50%;
      width: 20px;
      height: 20px;
      animation: spin 1s linear infinite;
      margin-right: 0.5rem;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      .app-header {
        padding: 0.75rem 1rem;
      }
      
      .logo-title {
        font-size: 1.25rem;
      }
      
      .hero-title {
        font-size: 2rem;
      }
      
      .features-grid {
        grid-template-columns: 1fr;
      }
      
      .chatbot-window {
        width: 95%;
        height: 85vh;
      }
      
      .chatbot-btn {
        padding: 0.75rem 1.25rem;
        font-size: 0.9rem;
      }
      
      .header-actions {
        gap: 0.5rem;
      }
    }

    @media (max-width: 480px) {
      .hero-title {
        font-size: 1.75rem;
      }
      
      .hero-subtitle {
        font-size: 1rem;
      }
      
      .chatbot-modal {
        padding: 0.5rem;
      }
      
      .chatbot-header {
        padding: 0.75rem 1rem;
      }
      
      .chatbot-messages {
        padding: 1rem;
      }
      
      .message {
        max-width: 90%;
      }
      
      .header-btn {
        padding: 0.5rem 0.75rem;
        font-size: 0.8rem;
      }
      
      .expert-card {
        padding: 10px;
      }
    }
  </style>
</head>
<body>
  <!-- Main Header -->
  <header class="app-header" id="appHeader">
    <div class="logo-container">
      <img src="https://msmeosem.in/assets/images/osem.png" alt="MSME OSEM Logo" class="logo-img">
      <div class="logo-text">
        <span class="logo-title">MSME OSEM</span>
        <span class="logo-subtitle">AI-Powered Business Assistant</span>
      </div>
    </div>

    <div class="header-actions">
      <button class="header-btn" id="aboutBtn">
        <i class="fas fa-info-circle"></i> About
      </button>
      <button class="header-btn" id="helpBtn">
        <i class="fas fa-question-circle"></i> Help
      </button>
    </div>
  </header>

  <!-- Main Content -->
  <main class="main-container">
    <section class="hero-section">
      <h1 class="hero-title">Empower Your Business with AI</h1>
      <p class="hero-subtitle">
        MSME OSEM provides intelligent guidance for entrepreneurs and small businesses. 
        Get personalized advice, access government schemes, and grow your business with our AI assistant.
      </p>
    </section>

    <div class="features-grid">
      <div class="feature-card">
        <i class="fas fa-lightbulb feature-icon"></i>
        <h3 class="feature-title">Business Planning</h3>
        <p class="feature-desc">
          Get step-by-step guidance to create a solid business plan tailored to your industry and location.
        </p>
      </div>
      
      <div class="feature-card">
        <i class="fas fa-hand-holding-usd feature-icon"></i>
        <h3 class="feature-title">Funding Assistance</h3>
        <p class="feature-desc">
          Discover suitable government schemes (CMYUVA, ODOP) and funding options for your business needs.
        </p>
      </div>
      
      <div class="feature-card">
        <i class="fas fa-chart-line feature-icon"></i>
        <h3 class="feature-title">Market Analysis</h3>
        <p class="feature-desc">
          Understand your target market and competition with AI-powered insights.
        </p>
      </div>
      
      <div class="feature-card">
        <i class="fas fa-gavel feature-icon"></i>
        <h3 class="feature-title">Legal Guidance</h3>
        <p class="feature-desc">
          Navigate MSME regulations and compliance requirements specific to Odisha.
        </p>
      </div>
      
      <div class="feature-card">
        <i class="fas fa-cogs feature-icon"></i>
        <h3 class="feature-title">Operations Support</h3>
        <p class="feature-desc">
          Optimize your business operations with AI-driven recommendations.
        </p>
      </div>
      
      <div class="feature-card">
        <i class="fas fa-user-tie feature-icon"></i>
        <h3 class="feature-title">Mentorship</h3>
        <p class="feature-desc">
          Connect with industry experts and get personalized business advice.
        </p>
      </div>
    </div>

    <div class="cta-section">
      <button class="cta-btn" id="openChatbotBtn">
        <i class="fas fa-comments"></i> Chat with OSEM Assistant
      </button>
    </div>
  </main>

  <!-- Chatbot Button -->
  <div class="chatbot-container">
    <button class="chatbot-btn" id="chatbotBtn">
      <i class="fas fa-robot"></i> OSEM Assistant
    </button>
  </div>

  <!-- Chatbot Modal -->
  <div class="chatbot-modal" id="chatbotModal">
    <div class="chatbot-window">
      <div class="chatbot-header">
        <h2 class="chatbot-title">
         <img src="https://msmeosem.in/assets/images/osem.png" alt="MSME OSEM Logo" class="logo-img">  OSEM Assistant
        </h2>
        <button class="chatbot-close" id="closeChatbotBtn">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="chatbot-messages" id="chatMessages">
        <div class="message message-bot">
          <div class="message-avatar">O</div>
          <div class="message-content">
            <p>Hello! I'm your MSME OSEM Assistant. How can I help you today?</p>
            
            <div class="quick-replies">
              <button class="quick-reply-btn" data-reply="Tell me about CMYUVA scheme">CMYUVA Scheme</button>
              <button class="quick-reply-btn" data-reply="What is UPICON?">UPICON</button>
              <button class="quick-reply-btn" data-reply="How to register my MSME?">MSME Registration</button>
              <button class="quick-reply-btn" data-reply="What is Youth Adda">Youth Adda</button>
              <button class="quick-reply-btn" id="expert-list-btn">Find Experts</button>
            </div>
          </div>
        </div>
      </div>
      
      <div class="chatbot-input">
        <input type="text" class="chatbot-input-field" id="userInput" placeholder="Type your business question here..." autocomplete="off">
        <button class="chatbot-send-btn" id="sendBtn">
          <i class="fas fa-paper-plane"></i>
        </button>
        <button class="chatbot-stop-btn" id="stopBtn">
          <i class="fas fa-stop"></i>
        </button>
      </div>
      
      <div class="chatbot-actions">
        <button class="chatbot-clear-btn" id="clearChatBtn">
          <i class="fas fa-trash-alt"></i> Clear Chat
        </button>
      </div>
    </div>
  </div>

  <script>
    // DOM Elements
    const chatbotBtn = document.getElementById('chatbotBtn');
    const openChatbotBtn = document.getElementById('openChatbotBtn');
    const closeChatbotBtn = document.getElementById('closeChatbotBtn');
    const chatbotModal = document.getElementById('chatbotModal');
    const appHeader = document.getElementById('appHeader');
    const chatMessages = document.getElementById('chatMessages');
    const userInput = document.getElementById('userInput');
    const sendBtn = document.getElementById('sendBtn');
    const stopBtn = document.getElementById('stopBtn');
    const clearChatBtn = document.getElementById('clearChatBtn');
    const aboutBtn = document.getElementById('aboutBtn');
    const helpBtn = document.getElementById('helpBtn');
    
    // State variables
    let chatHistory = [];
    let typingIndicator = null;
    let controller = null;
    let isGenerating = false;

    // Initialize the app
    function init() {
      setupEventListeners();
      scrollToBottom();
    }

    // Set up event listeners
    function setupEventListeners() {
      // Chatbot toggle buttons
      chatbotBtn.addEventListener('click', toggleChatbot);
      openChatbotBtn.addEventListener('click', toggleChatbot);
      closeChatbotBtn.addEventListener('click', toggleChatbot);
      
      // Send message on button click or Enter key
      sendBtn.addEventListener('click', sendMessage);
      userInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
      });
      
      // Stop generation button
      stopBtn.addEventListener('click', stopGeneration);
      
      // Clear chat button
      clearChatBtn.addEventListener('click', clearChatHistory);
      
      // About and Help buttons
      aboutBtn.addEventListener('click', () => {
        toggleChatbot();
        setTimeout(() => {
          userInput.value = "Tell me about MSME OSEM";
          sendMessage();
        }, 300);
      });
      
      helpBtn.addEventListener('click', () => {
        toggleChatbot();
        setTimeout(() => {
          userInput.value = "How can you help me with my business?";
          sendMessage();
        }, 300);
      });
      
      // Quick reply buttons
      document.addEventListener('click', (e) => {
        if (e.target.classList.contains('quick-reply-btn')) {
          if (e.target.id === 'expert-list-btn') {
            showExpertOptions();
          } else {
            const replyText = e.target.getAttribute('data-reply') || e.target.textContent;
            userInput.value = replyText;
            sendMessage();
          }
        }
      });
    }

    // Toggle chatbot visibility
    function toggleChatbot() {
      chatbotModal.classList.toggle('active');
      appHeader.classList.toggle('hidden');
      chatbotBtn.classList.toggle('hidden');
      
      if (chatbotModal.classList.contains('active')) {
        userInput.focus();
      }
    }

    // Display a message in the chat
    function displayMessage(sender, content) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message message-${sender}`;
      
      const avatar = document.createElement('div');
      avatar.className = 'message-avatar';
      avatar.textContent = sender === 'user' ? 'Y' : 'O';
      
      const messageContent = document.createElement('div');
      messageContent.className = 'message-content';
      messageContent.innerHTML = content;
      
      messageDiv.appendChild(avatar);
      messageDiv.appendChild(messageContent);
      
      chatMessages.appendChild(messageDiv);
      scrollToBottom();
      
      // Add to chat history
      chatHistory.push({
        sender,
        content,
        timestamp: new Date().toISOString()
      });
    }

    // Show typing indicator
    function showTypingIndicator() {
      if (!typingIndicator) {
        typingIndicator = document.createElement('div');
        typingIndicator.className = 'typing-indicator';
        typingIndicator.innerHTML = '<span></span><span></span><span></span>';
        chatMessages.appendChild(typingIndicator);
        scrollToBottom();
      }
    }

    // Remove typing indicator
    function removeTypingIndicator() {
      if (typingIndicator) {
        typingIndicator.remove();
        typingIndicator = null;
      }
    }

    // Scroll to bottom of chat
    function scrollToBottom() {
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    // Stop response generation
    function stopGeneration() {
      if (controller) {
        controller.abort();
        isGenerating = false;
        stopBtn.style.display = 'none';
        sendBtn.style.display = 'flex';
        removeTypingIndicator();
        displayMessage('bot', 'Response generation stopped.');
        enableInput();
      }
    }

    // Enable input field and buttons
    function enableInput() {
      userInput.disabled = false;
      sendBtn.disabled = false;
    }

    // Disable input field and buttons
    function disableInput() {
      userInput.disabled = true;
      sendBtn.disabled = true;
    }

    // Send message to backend
    async function sendMessage() {
      const message = userInput.value.trim();
      if (!message) return;
      
      // Display user message
      displayMessage('user', message);
      userInput.value = '';
      
      // Disable input during processing
      disableInput();
      showTypingIndicator();
      
      // Show stop button
      stopBtn.style.display = 'flex';
      sendBtn.style.display = 'none';
      isGenerating = true;
      
      // Create AbortController for the request
      controller = new AbortController();
      console.log("In Try");
      try {
        // Call the actual backend API
        const response = await fetch('/chat', {
          
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          
          body: JSON.stringify({ message }),
          signal: controller.signal
        });
console.log("check error");
console.log("check " . response);
        // Check if the response is successful
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Process the response
       // Process the response
const contentType = response.headers.get('content-type');
let data;

if (contentType && contentType.includes('application/json')) {
  data = await response.json();
  removeTypingIndicator();
  displayMessage('bot', data.response);
} else {
  const text = await response.text();
  removeTypingIndicator();
  displayMessage('bot', text);  // fallback for plain text
}

        
      } catch (error) {
          console.log("In Try");
        if (error.name === 'AbortError') {
          console.log('Request aborted by user');
        } else {
          console.error('Error:', error);
          removeTypingIndicator();
          displayMessage('bot', 'Sorry, something went wrong. Please try again later.');
        }
      } finally {
        // Reset UI state
        stopBtn.style.display = 'none';
        sendBtn.style.display = 'flex';
        isGenerating = false;
        enableInput();
        userInput.focus();
      }
    }

    // Show expert search options
    function showExpertOptions() {
      const messageDiv = document.createElement('div');
      messageDiv.className = 'message message-bot';
      messageDiv.innerHTML = `
        <div class="message-avatar">O</div>
        <div class="message-content">
          <p>How would you like to find experts?</p>
          <div class="expert-options">
            <button class="option-btn" id="byDistrictBtn">
              <i class="fas fa-map-marker-alt"></i> Search by District
            </button>
            <button class="option-btn" id="byDesignationBtn">
              <i class="fas fa-user-tag"></i> Search by Expertise
            </button>
          </div>
        </div>
      `;
      chatMessages.appendChild(messageDiv);
      scrollToBottom();
      
      // Add event listeners to option buttons
      document.getElementById('byDistrictBtn').addEventListener('click', showDistrictSelection);
      document.getElementById('byDesignationBtn').addEventListener('click', showDesignationSelection);
    }

    // Show district selection
    function showDistrictSelection() {
      // Show loading indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.className = 'message message-bot';
      loadingIndicator.innerHTML = `
        <div class="message-avatar">O</div>
        <div class="message-content">Fetching districts...</div>
      `;
      chatMessages.appendChild(loadingIndicator);
      scrollToBottom();
      
      // Fetch districts from backend API
      fetch('/api/expert_list')
        .then(response => response.json())
        .then(data => {
          // Remove loading indicator
          chatMessages.removeChild(loadingIndicator);
          
          if (data.districts && data.districts.length > 0) {
            const districtOptions = data.districts.map(district => 
              `<button class="selection-option" data-district="${district}">${district}</button>`
            ).join('');
            
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message message-bot';
            messageDiv.innerHTML = `
              <div class="message-avatar">O</div>
              <div class="message-content">
                <p>Please select a district:</p>
                <div class="selection-options">${districtOptions}</div>
              </div>
            `;
            chatMessages.appendChild(messageDiv);
            scrollToBottom();
            
            // Add event listeners to district buttons
            document.querySelectorAll('.selection-option').forEach(button => {
              button.addEventListener('click', () => {
                const district = button.getAttribute('data-district');
                fetchExpertsForDistrict(district);
              });
            });
          } else {
            displayMessage('bot', 'No districts with experts found.');
          }
        })
        .catch(error => {
          console.error('Error fetching districts:', error);
          chatMessages.removeChild(loadingIndicator);
          displayMessage('bot', 'Sorry, I couldn\'t fetch the districts. Please try again later.');
        });
    }

    // Show designation selection
    function showDesignationSelection() {
      // Show loading indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.className = 'message message-bot';
      loadingIndicator.innerHTML = `
        <div class="message-avatar">O</div>
        <div class="message-content">Fetching expertise areas...</div>
      `;
      chatMessages.appendChild(loadingIndicator);
      scrollToBottom();
      
      // Fetch designations from backend API
      fetch('/api/expert_designations')
        .then(response => response.json())
        .then(data => {
          // Remove loading indicator
          chatMessages.removeChild(loadingIndicator);
          
          if (data.designations && data.designations.length > 0) {
            const designationOptions = data.designations.map(designation => 
              `<button class="selection-option" data-designation="${designation}">${designation}</button>`
            ).join('');
            
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message message-bot';
            messageDiv.innerHTML = `
              <div class="message-avatar">O</div>
              <div class="message-content">
                <p>Please select an expertise area:</p>
                <div class="selection-options">${designationOptions}</div>
              </div>
            `;
            chatMessages.appendChild(messageDiv);
            scrollToBottom();
            
            // Add event listeners to designation buttons
            document.querySelectorAll('.selection-option').forEach(button => {
              button.addEventListener('click', () => {
                const designation = button.getAttribute('data-designation');
                fetchExpertsByDesignation(designation);
              });
            });
          } else {
            displayMessage('bot', 'No expertise areas found.');
          }
        })
        .catch(error => {
          console.error('Error fetching designations:', error);
          chatMessages.removeChild(loadingIndicator);
          displayMessage('bot', 'Sorry, I couldn\'t fetch the expertise areas. Please try again later.');
        });
    }

    // Fetch experts for a district
    function fetchExpertsForDistrict(district) {
      // Show loading indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.className = 'message message-bot';
      loadingIndicator.innerHTML = `
        <div class="message-avatar">O</div>
        <div class="message-content">Finding experts in ${district}...</div>
      `;
      chatMessages.appendChild(loadingIndicator);
      scrollToBottom();
      
      // Fetch experts from backend API
      fetch(`/api/experts_in_district?district=${encodeURIComponent(district)}`)
        .then(response => response.json())
        .then(data => {
          // Remove loading indicator
          chatMessages.removeChild(loadingIndicator);
          
          if (data.experts && data.experts.length > 0) {
            const expertsList = data.experts.map(expert => `
              <div class="expert-card">
                <strong>${expert.name}</strong>
                <div><span class="expert-label">Designation:</span> <span class="expert-value">${expert.designation}</span></div>
                <div><span class="expert-label">Email:</span> <span class="expert-value">${expert.email}</span></div>
                <div><span class="expert-label">Phone:</span> <span class="expert-value">${expert.mobile}</span></div>
                <div class="expert-district">${district}</div>
              </div>
            `).join('');
            
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message message-bot';
            messageDiv.innerHTML = `
              <div class="message-avatar">O</div>
              <div class="message-content">
                <p>Experts available in ${district}:</p>
                <div class="experts-list">${expertsList}</div>
              </div>
            `;
            chatMessages.appendChild(messageDiv);
          } else {
            displayMessage('bot', `No experts found in ${district}.`);
          }
        })
        .catch(error => {
          console.error('Error fetching experts:', error);
          chatMessages.removeChild(loadingIndicator);
          displayMessage('bot', 'Sorry, I couldn\'t fetch the experts. Please try again later.');
        });
    }

    // Fetch experts by designation
    function fetchExpertsByDesignation(designation) {
      // Show loading indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.className = 'message message-bot';
      loadingIndicator.innerHTML = `
        <div class="message-avatar">O</div>
        <div class="message-content">Finding ${designation} experts...</div>
      `;
      chatMessages.appendChild(loadingIndicator);
      scrollToBottom();
      
      // Fetch experts from backend API
      fetch(`/api/experts_by_designation?designation=${encodeURIComponent(designation)}`)
        .then(response => response.json())
        .then(data => {
          // Remove loading indicator
          chatMessages.removeChild(loadingIndicator);
          
          if (data.experts && data.experts.length > 0) {
            const expertsList = data.experts.map(expert => `
              <div class="expert-card">
                <strong>${expert.name}</strong>
                <div><span class="expert-label">Designation:</span> <span class="expert-value">${designation}</span></div>
                <div><span class="expert-label">District:</span> <span class="expert-value">${expert.district}</span></div>
                <div><span class="expert-label">Email:</span> <span class="expert-value">${expert.email}</span></div>
                <div><span class="expert-label">Phone:</span> <span class="expert-value">${expert.mobile}</span></div>
               <!-- <div class="expert-designation">${designation}</div> -->

              </div>
            `).join('');
            
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message message-bot';
            messageDiv.innerHTML = `
              <div class="message-avatar">O</div>
              <div class="message-content">
                <p>${designation} experts:</p>
                <div class="experts-list">${expertsList}</div>
              </div>
            `;
            chatMessages.appendChild(messageDiv);
          } else {
            displayMessage('bot', `No ${designation} experts found.`);
          }
        })
        .catch(error => {
          console.error('Error fetching experts:', error);
          chatMessages.removeChild(loadingIndicator);
          displayMessage('bot', 'Sorry, I couldn\'t fetch the experts. Please try again later.');
        });
    }

    // Clear chat history
    function clearChatHistory() {
      if (confirm('Are you sure you want to clear the chat history?')) {
        chatMessages.innerHTML = `
          <div class="message message-bot">
            <div class="message-avatar">O</div>
            <div class="message-content">
              <p>Hello! I'm your MSME OSEM Assistant. How can I help you today?</p>
              <p>I can assist with:</p>
              <ul>
                <li>Business planning and strategy</li>
                <li>Funding and government schemes</li>
                <li>Market analysis</li>
                <li>Connecting with business experts</li>
              </ul>
              <div class="quick-replies">
                <button class="quick-reply-btn" data-reply="Tell me about CMYUVA scheme">CMYUVA Scheme</button>
                <button class="quick-reply-btn" data-reply="What is UPICON?">UPICON</button>
                <button class="quick-reply-btn" data-reply="How to register my MSME?">MSME Registration</button>
                <button class="quick-reply-btn" data-reply="What is Youth Adda">Youth Adda</button>
                <button class="quick-reply-btn" id="expert-list-btn">Find Experts</button>
               
              </div>
            </div>
          </div>
        `;
        chatHistory = [];
      }
    }

    // Initialize the app when DOM is loaded
    document.addEventListener('DOMContentLoaded', init);
  </script>
</body>
</html>
